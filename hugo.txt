#-------------------------------------------------------------------------------
# To install the exended edition of Hugo:
brew install hugo
hugo version

# Create a new  site
cd /Users/kk/Home/_work/blog
hugo new site tech-blog --format yaml

# theme: Stack

cd /Users/kk/Home/_work/blog/tech-blog  # ブログのルートディレクトリへ移動
# サブモジュールとして追加
# git submodule add --depth=1 https://github.com/CaiJimmy/hugo-theme-stack/ themes/hugo-theme-stack  
git submodule add https://github.com/CaiJimmy/hugo-theme-stack/ themes/hugo-theme-stack 

git submodule update --init --recursive  # サブモジュールの初期化と取得
git submodule update --remote --merge  # サブモジュールをリモートの最新バージョンに更新

# リポジトリにサブモジュールを追加し、GitHub Actions の中でサブモジュールを初期化するように設定します。
git submodule add https://github.com/CaiJimmy/hugo-theme-stack.git themes/hugo-theme-stack
git submodule update --init --recursive
git add .gitmodules themes/hugo-theme-stack
git commit -m "Add hugo-theme-stack as a submodule"
git push origin main

# Installing/Updating PaperMod
cd /Users/kk/Home/_work/blog/tech-blog
git init
git submodule add --depth=1 https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod
git submodule update --init --recursive
# needed when you reclone your repo (submodules may not get cloned automatically)
git submodule update --remote --merge

# hugo.yaml の編集: 
https://adityatelange.github.io/hugo-PaperMod/posts/papermod/papermod-installation/
の内容を参考に.

# baseURL: "https://katsu-ds-lab.github.io/tech-blog/"
baseURL: "https://14jcjc.github.io/tech-blog/"
languageCode: jp
title: katsuのブログ
theme: hugo-theme-stack
# theme: PaperMod

* 標準編の記事を作成

hugo new content --kind standard 100knocks/standard/r-056.md

* 出力先ディレクトリ（public/）をクリアして再ビルド
hugo --cleanDestinationDir

# public/ディレクトリを一度削除して再ビルド
rm -rf public/
hugo

* Display site configuration

hugo config

* 将来の公開日が設定されているコンテンツをリストアップ

hugo list future

* ローカル環境でサイトを確認

hugo server
# to include draft content
hugo server -D
# 最後に修正したページにブラウザから自動的にリダイレクトさせたい場合
hugo server --navigateToChanged
# キャッシュをクリア
hugo server --ignoreCache
# Fast Render（高速レンダリング）を無効化する場合
hugo server --disableFastRender
# ポートを指定する場合
hugo server --port 1313

hugo server --port 1313 --ignoreCache --disableFastRender --cleanDestinationDir --navigateToChanged -D

hugo server --port 1313 --ignoreCache --disableFastRender --cleanDestinationDir --navigateToChanged --environment production -D

# 以下にアクセスしてサイトを確認する
http://localhost:1313/tech-blog/

tech-blog/.gitignore を作成する。以下からダウンロード:
https://github.com/adityatelange/hugo-PaperMod/blob/exampleSite/.gitignore

* GitHub でリモートリポジトリを作成する: 
tech-blog (Public)

* GitHub Pages の設定
「Settings」→「Pages」で、Build and deployment「Source」を
"Github Actions" に変更する。

cd /Users/kk/Home/_work/blog/tech-blog

# check
# ssh -T git@github.com-katsu-ds-lab
ssh -T git@github.com-14jcjc

# リポジトリをローカルに接続する

# git remote add origin git@github.com-katsu-ds-lab:katsu-ds-lab/tech-blog.git
# git remote set-url origin git@github.com-katsu-ds-lab:katsu-ds-lab/tech-blog.git
# git remote -v

# git remote add origin git@github.com-14jcjc:14jcjc/tech-blog.git
git remote set-url origin git@github.com-14jcjc:14jcjc/tech-blog.git
# git remote set-url origin git@github.com-14jcjc:14jcjc/tech-blog-2.git
git remote -v

# push

# git config --local user.name "katsu-ds-lab"
# git config --local user.email "katsu-ds-lab@gmail.com"
# git config --local url."github.com-katsu-ds-lab:".insteadOf "git@github.com:"

git config --local user.name "14jcjc"
git config --local user.email "14jcjc@gmail.com"
git config --local url."github.com-14jcjc:".insteadOf "git@github.com:"

# git add -A
# git commit -m "Initial commit"
git branch -M main
git push -u origin main

# デプロイ用設定
# GitHub Actions を利用する場合
# Hugo 用の GitHub Actions ワークフローを設定する
cd /Users/kk/Home/_work/blog/tech-blog
mkdir -p .github/workflows
# touch .github/workflows/gh-pages.yml
touch .github/workflows/hugo.yaml

下記ページの hugo.yaml をコピペする: 
https://gohugo.io/hosting-and-deployment/hosting-on-github/

# hugo version に合わせる
HUGO_VERSION: 0.140.1

# テーマをサブモジュールで管理している場合に追記: 
- name: Install submodules
  run: git submodule update --init --recursive

git add -A
git commit -m "Create .github/workflows/hugo.yaml"
git push -u origin main

From GitHub’s main menu, choose Actions.
https://github.com/katsu-ds-lab/tech-blog/actions

When GitHub has finished building and deploying your site, the color of the status indicator will change to green.

エラー発生時のログ: commit -> 左メニュー[Usage]

数分待つと以下にブログが公開される: 
https://14jcjc.github.io/tech-blog/
(config.yml の baseURL)

#-------------------------------------------------------------------------------
* git init

ssh -T git@github.com-14jcjc
cd /Users/kk/Home/_work/blog/tech-blog
git clone git@github.com-14jcjc:14jcjc/tech-blog.git .
# git init
# git remote add origin git@github.com-14jcjc:14jcjc/tech-blog.git
# git remote -v
# git pull origin main

git remote set-url origin git@github.com-14jcjc:14jcjc/tech-blog.git
git remote -v

git config --local user.name "14jcjc"
git config --local user.email "14jcjc@gmail.com"
git config --local url."github.com-14jcjc:".insteadOf "git@github.com:"

-------------------------------------------------------------------------------
* カスタムドメイン

1. お名前.com などで ドメインを購入する。
  katsu-ds-lab.com (2025-03-15)

2. DNS Aレコードを設定
GitHub PagesがホストされているIPアドレスに、ドメインをポイントするためにAレコードを設定します。以下のIPアドレスを設定します。

185.199.108.153
185.199.109.153
185.199.110.153
185.199.111.153

3. GitHub レポジトリ → Settings → Pages

Custom domain に「katsu-ds-lab.com」を設定する。
「Enforce HTTPS」にチェックを入れる。

4. DNS が正しく設定されているか確認

% dig katsu-ds-lab.com +short

185.199.111.153
185.199.110.153
185.199.109.153
185.199.108.153

5. baseURL: "https://katsu-ds-lab.com" に変更する
  → この設定は必要？

-------------------------------------------------------------------------------
